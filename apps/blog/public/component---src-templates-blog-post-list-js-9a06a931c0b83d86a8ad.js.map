{"version":3,"sources":["webpack:///./src/components/blog-post-card/index.js","webpack:///./src/templates/blog-post-list-content.js","webpack:///./src/templates/blog-post-list.js"],"names":["BlogPostCard","post","to","slug","className","styles","card","content_header","content_category","content_title","title","date_published","published_at","content_summary","dangerouslySetInnerHTML","__html","headline","childMarkdownRemark","html","show_more","show_more_icon","BlogPostListContent","allPostsData","pageInfo","location","BlogPosts","edges","map","edge","index","key","node","id","single_post","criticalImage","layout","main","blog_posts","currentPage","totalPages","currentPath","pathname","BlogPostListPage","data","pageContext","allPost","query","pageQuery"],"mappings":"oLAMe,SAASA,EAAT,GAA+B,IAARC,EAAO,EAAPA,KAEpC,OACE,kBAAC,OAAD,CAAMC,GAAID,EAAKE,KAAMC,UAAWC,IAAOC,MACrC,yBAAKF,UAAWC,IAAOE,gBACrB,0BAAMH,UAAWC,IAAOG,kBAAxB,QACA,wBAAIJ,UAAWC,IAAOI,eACnBR,EAAKS,OAER,0BAAMN,UAAWC,IAAOM,gBACrBV,EAAKW,cAER,yBAAKR,UAAWC,IAAOQ,gBAAiBC,wBAA0B,CAACC,OAAQd,EAAKe,SAASC,oBAAoBC,SAG/G,0BAAMd,UAAWC,IAAOc,WAAxB,eAEE,kBAAC,IAAD,CAAcf,UAAWC,IAAOe,mB,qCCjBzB,SAASC,EAAT,GAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAE7DC,EAAYH,EAAaI,MAC5BC,KAAI,SAACC,EAAMC,GACV,OACE,kBAAC7B,EAAD,CACE8B,IAAKF,EAAKG,KAAKC,GACf/B,KAAM2B,EAAKG,KACX3B,UAAWC,IAAO4B,YAClBC,cAAeL,EAAQ,OAK/B,OACE,yBAAKzB,UAAWC,IAAO8B,QACrB,6BAAS/B,UAAWC,IAAO+B,MACzB,yBAAKhC,UAAWC,IAAOgC,YACpBZ,GAEH,kBAAC,IAAD,CAAWa,YAAaf,EAASe,YAAaC,WAAYhB,EAASgB,WAAYC,YAAahB,EAASiB,aCpB9F,SAASC,EAAT,GAA0D,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YAAapB,EAAW,EAAXA,SACrDD,EAAW,CACfe,YAAaM,EAAYN,YACzBC,WAAYK,EAAYL,YAG1B,OACE,kBAAC,IAAD,KACE,kBAAClB,EAAD,CACEC,aAAcqB,EAAKE,QACnBtB,SAAUA,EACVC,SAAUA,KAjBlB,wHAuBO,IAAMsB,EAAK,aAcLC,EAAS","file":"component---src-templates-blog-post-list-js-9a06a931c0b83d86a8ad.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { ReactComponent as ChevronRight } from '../icons/chevron-right.svg'\n\nimport styles from './blog-post-card.module.sass'\n\nexport default function BlogPostCard({post}) {\n\n  return (\n    <Link to={post.slug} className={styles.card}>\n      <div className={styles.content_header}>\n        <span className={styles.content_category}>blog</span>\n        <h2 className={styles.content_title}>\n          {post.title}\n        </h2>\n        <span className={styles.date_published}>\n          {post.published_at}\n        </span>\n        <div className={styles.content_summary} dangerouslySetInnerHTML={ {__html: post.headline.childMarkdownRemark.html} } />\n      </div>\n\n      <span className={styles.show_more}>\n        Czytaj dalej\n        <ChevronRight className={styles.show_more_icon}/>\n      </span>\n    </Link>\n  )\n}\n","import React from 'react'\nimport BlogPostCard from '../components/blog-post-card'\nimport Paginator from '../components/paginator'\n\nimport styles from './page.module.sass'\n\nexport default function BlogPostListContent({allPostsData, pageInfo, location}) {\n\n  const BlogPosts = allPostsData.edges\n    .map((edge, index) => {\n      return (\n        <BlogPostCard\n          key={edge.node.id}\n          post={edge.node}\n          className={styles.single_post}\n          criticalImage={index < 3}\n        />\n      )\n    })\n\n  return (\n    <div className={styles.layout}>\n      <section className={styles.main}>\n        <div className={styles.blog_posts}>\n          {BlogPosts}\n        </div>\n        <Paginator currentPage={pageInfo.currentPage} totalPages={pageInfo.totalPages} currentPath={location.pathname} />\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Page from './page'\nimport BlogPostListContent from './blog-post-list-content'\n\nexport default function BlogPostListPage({data, pageContext, location}) {\n  const pageInfo = {\n    currentPage: pageContext.currentPage,\n    totalPages: pageContext.totalPages\n  }\n\n  return (\n    <Page>\n      <BlogPostListContent\n        allPostsData={data.allPost}\n        pageInfo={pageInfo}\n        location={location}\n      />\n    </Page>\n  )\n}\n\nexport const query = graphql`\nfragment blogPostForList on Post {\n  id\n  title\n  slug\n  published_at(formatString: \"D MMM YYYY\", locale: \"pl\")\n  headline {\n    childMarkdownRemark {\n      html\n    }\n  }\n}\n`\n\nexport const pageQuery = graphql`\n  query blogPostListQuery($skip: Int!, $limit: Int!) {\n    allPost (\n      sort: { order: DESC, fields: [published_at] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          ...blogPostForList\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}