{"version":3,"sources":["webpack:///./src/components/breadcrumbs/index.js","webpack:///./src/templates/blog-post-page/index.js"],"names":["Breadcrumbs","subsectionName","subsectionSlug","className","styles","breadcrumbs","breadcrumb_item","to","breadcrumb_link","breadcrumb_homepage_text","breadcrumb_homepage_logo","svg_logo","BlogPostPage","post","data","strapiArticle","pageStyles","layout","render","siteUrl","html_title","name","content","property","main","postStyles","post_intro","post_navigation","post_title","title","date_published","published_at","post_headline","dangerouslySetInnerHTML","__html","parsedHeadline","childMarkdownRemark","html","post_body","parsedContent","pageQuery"],"mappings":"6FAAA,wGAKe,SAASA,EAAT,GAA0D,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,eACpD,OACE,wBAAIC,UAAWC,IAAOC,aACpB,wBAAIF,UAAWC,IAAOE,iBACpB,kBAAC,OAAD,CAAMC,GAAG,IAAIJ,UAAWC,IAAOI,iBAC7B,0BAAML,UAAWC,IAAOK,0BAAxB,iBACA,0BAAMN,UAAWC,IAAOM,0BAA0B,kBAAC,IAAD,CAAMP,UAAWC,IAAOO,cAG9E,wBAAIR,UAAWC,IAAOE,iBAAiB,kBAAC,OAAD,CAAMC,GAAE,IAAML,EAAkBC,UAAWC,IAAOI,iBAAkBP,O,kCCdjH,4MAWe,SAASW,EAAT,GAA+B,IACrBC,EADoB,EAAPC,KAC5BC,cAGR,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAWa,IAAWC,QACzB,kBAAC,IAAD,CAAcC,OAAQ,cAAEC,QAAF,OACpB,kBAAC,SAAD,KACE,+BAAQN,EAAKO,YACb,0BAAMC,KAAK,cAAcC,QAAST,EAAKO,aAEvC,0BAAMG,SAAS,UAAUD,QAAQ,YACjC,0BAAMC,SAAS,kBAAkBD,QAAQ,aAK7C,6BAASnB,UAAWa,IAAWQ,MAC7B,6BAASrB,UAAWsB,IAAWZ,MAE7B,yBAAKV,UAAWsB,IAAWC,YACzB,yBAAKvB,UAAWsB,IAAWE,iBACzB,kBAAC,IAAD,CAAa1B,eAAe,OAAOC,eAAe,UAGpD,wBAAIC,UAAWsB,IAAWG,YAAaf,EAAKgB,OAG5C,0BAAM1B,UAAWsB,IAAWK,gBACzBjB,EAAKkB,cAGR,yBAAK5B,UAAWsB,IAAWO,cAAeC,wBAAyB,CAAEC,OAAQrB,EAAKsB,eAAeC,oBAAoBC,SAEvH,yBAAKlC,UAAWsB,IAAWa,WACzB,yBAAKL,wBAAyB,CAAEC,OAAQrB,EAAK0B,cAAcH,oBAAoBC,aAStF,IAAMG,EAAS","file":"component---src-templates-blog-post-page-index-js-b11e776f500c2d7064c1.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { ReactComponent as Logo } from '../icons/logo_simple.svg'\nimport styles from './breadcrumbs.module.sass'\n\nexport default function Breadcrumbs({ subsectionName, subsectionSlug }) {\n  return (\n    <ol className={styles.breadcrumbs}>\n      <li className={styles.breadcrumb_item}>\n        <Link to=\"/\" className={styles.breadcrumb_link}>\n          <span className={styles.breadcrumb_homepage_text}>Strona Główna</span>\n          <span className={styles.breadcrumb_homepage_logo}><Logo className={styles.svg_logo} /></span>\n        </Link>\n      </li>\n      <li className={styles.breadcrumb_item}><Link to={`/${subsectionSlug}`} className={styles.breadcrumb_link}>{subsectionName}</Link></li>\n    </ol>\n  )\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport Page from '../page'\nimport Breadcrumbs from '../../components/breadcrumbs'\n\nimport SiteMetadata from '../../components/site_metadata'\n\nimport pageStyles from '../page.module.sass'\nimport postStyles from './blog-post.module.sass'\n\nexport default function BlogPostPage({data}) {\n  const { strapiArticle: post } = data\n\n  // TODO: should it be setting all of this meta data? Some of it lives within the Page element itself\n  return (\n    <Page>\n      <div className={pageStyles.layout}>\n        <SiteMetadata render={({siteUrl}) =>\n          <Helmet>\n            <title>{post.html_title}</title>\n            <meta name='description' content={post.html_title}/>\n            {/*<meta property='og:image' content={siteUrl + post.featured_image.childImageSharp.fluid.src} />*/}\n            <meta property='og:type' content='article' />\n            <meta property='article:section' content='blog' />\n            {/*{(recipe.tags || []).map((tag, index) => <meta property='article:tag' content={tag} key={index}/>)}*/}\n          </Helmet>\n        } />\n\n        <section className={pageStyles.main}>\n          <article className={postStyles.post}>\n\n            <div className={postStyles.post_intro}>\n              <div className={postStyles.post_navigation}>\n                <Breadcrumbs subsectionName='blog' subsectionSlug='blog'/>\n              </div>\n\n              <h1 className={postStyles.post_title}>{post.title}</h1>\n\n              {/*TODO: can be a component since it's used on both pages*/}\n              <span className={postStyles.date_published}>\n                {post.published_at}\n              </span>\n\n              <div className={postStyles.post_headline} dangerouslySetInnerHTML={{ __html: post.parsedHeadline.childMarkdownRemark.html }}></div>\n            </div>\n            <div className={postStyles.post_body}>\n              <div dangerouslySetInnerHTML={{ __html: post.parsedContent.childMarkdownRemark.html }}></div>\n            </div>\n          </article>\n        </section>\n      </div>\n    </Page>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    strapiArticle(slug: { eq: $slug }) {\n      parsedHeadline {\n        childMarkdownRemark {\n          html\n        }\n      }\n      parsedContent {\n        childMarkdownRemark {\n            html\n        }  \n      }\n      slug\n      title\n      published_at(formatString: \"D MMM YYYY\", locale: \"pl\")\n    }\n  }\n`\n"],"sourceRoot":""}